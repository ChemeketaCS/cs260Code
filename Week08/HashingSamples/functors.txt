#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <unordered_set>
#include <algorithm>

using namespace std;

struct Point {
    int x;
    int y;

    bool operator==(const Point& other) const {
        return x == other.x && y == other.y;
    }
};


//Functor - object that has a () operator and behaves like a function
struct PointHasher {
    std::size_t operator()(const Point& p) const {
        return (p.x << 16) ^ p.y;
    }
};

struct PointEquals {
    bool operator()(const Point& p1, const Point& p2) const {
        return p1.x == p2.x && p1.y == p2.y;
    }
};



int main() {
    Point p1 = {1, 3};
    Point p2 = {4, 3};
    Point p3 = {3, 1};

    //Use PointHasher for hashing, == for equality comparison
    std::unordered_set<Point, PointHasher> s;
    s.insert(p1);
    s.insert(p2);

    //Use PointHasher for hashing, PointEquals for equality
    std::unordered_set<Point, PointHasher, PointEquals> s2;

    cout << std::count(s.begin(), s.end(), p1)  << endl;
    cout << std::count(s.begin(), s.end(), p2) << endl;
    cout << std::count(s.begin(), s.end(), p3) << endl;
}
