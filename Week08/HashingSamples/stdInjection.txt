#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <unordered_set>
#include <algorithm>

using namespace std;


struct Point {
    int x;
    int y;
};

//Provide equal_to and hash for Point via std:: injection
namespace std {
    template<>
    struct equal_to<Point> {
        bool operator()(const Point& p1, const Point& p2) const {
            return p1.x == p2.x && p1.y == p2.y;
        }
    };

    template<>
    struct hash<Point> {
        size_t operator()(const Point& p) const {
            return (p.x << 16) ^ p.y;
        }
    };
}



int main() {
    Point p1 = {1, 3};
    Point p2 = {4, 3};
    Point p3 = {3, 1};

    //Default is to use std::hash<Point> and std::equal_to<Point>
    std::unordered_set<Point> s;
    s.insert(p1);
    s.insert(p2);

    cout << std::count(s.begin(), s.end(), p1)  << endl;
    cout << std::count(s.begin(), s.end(), p2) << endl;
    cout << std::count(s.begin(), s.end(), p3) << endl;
}
